[{"/Users/pomelo/WebstormProjects/qr-code/src/index.js":"1","/Users/pomelo/WebstormProjects/qr-code/src/App.js":"2","/Users/pomelo/WebstormProjects/qr-code/src/reportWebVitals.js":"3","/Users/pomelo/WebstormProjects/qr-code/src/components/generateQrcode/index.js":"4","/Users/pomelo/WebstormProjects/qr-code/src/components/collection/index.js":"5"},{"size":500,"mtime":1611913095518,"results":"6","hashOfConfig":"7"},{"size":1372,"mtime":1611988528618,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1611913095519,"results":"9","hashOfConfig":"7"},{"size":4655,"mtime":1611998342238,"results":"10","hashOfConfig":"7"},{"size":1903,"mtime":1611998778995,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"jws510",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"14"},"/Users/pomelo/WebstormProjects/qr-code/src/index.js",[],["26","27"],"/Users/pomelo/WebstormProjects/qr-code/src/App.js",[],"/Users/pomelo/WebstormProjects/qr-code/src/reportWebVitals.js",[],"/Users/pomelo/WebstormProjects/qr-code/src/components/generateQrcode/index.js",["28"],"import React, {Component} from \"react\";\nimport QRCode from \"qrcode\";\nimport {TextField, Slider, Avatar, Button} from 'react95'\nimport './style.css';\nimport {ThemeProvider} from 'styled-components';\nimport original from \"react95/dist/themes/original\";\nimport copy from 'copy-to-clipboard';\nimport store from 'store';\nimport operationsPlugin from 'store/plugins/operations';\n\nstore.addPlugin(operationsPlugin);\n\nfunction generate(value, opt) {\n  if (!value) {\n    value = 'none'\n  }\n  return QRCode.toDataURL(value, {...opt, margin: 1});\n}\n\nclass GenerateQrcode extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      qrCodeImg: '',\n      width: 200,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.resize = this.resize.bind(this);\n    this.action = this.action.bind(this);\n  }\n\n  resize(event, value) {\n    this.setState({\n      width: value\n    });\n  }\n\n  handleChange(event) {\n    const {value} = event.target;\n    const {width} = this.state;\n    generate(value, {width})\n      .then(url => {\n        this.setState({\n          qrCodeImg: url\n        })\n      })\n      .catch(err => {\n        console.error(err)\n      });\n    this.setState({value});\n  }\n\n  componentDidMount() {\n    const {value, width} = this.state;\n    generate(value, {width})\n      .then(url => {\n        this.setState({\n          qrCodeImg: url\n        })\n      })\n      .catch(err => {\n        console.error(err)\n      });\n  }\n\n  async action(action) {\n    const {value, qrCodeImg} = this.state;\n    switch (action) {\n      case 'copy':\n        copy(value);\n        break;\n      case 'copy-qrcode':\n        const base64Response = await fetch(`${qrCodeImg}`);\n        const blob = await base64Response.blob();\n        const item = new window.ClipboardItem({\"image/png\": blob});\n        navigator.clipboard.write([item]);\n        break;\n      case 'download-qrcode':\n        window.location.href = qrCodeImg;\n        const a = document.createElement(\"a\");\n        a.href = qrCodeImg;\n        a.download = `${value}.png`;\n        a.click();\n        break;\n      case 'collect':\n        const last = store.get('collection')\n        if (last && Array.isArray(last)) {\n          if (!last.find(it => it === value)) {\n            last.push(value);\n            store.set('collection', last)\n          }\n        } else {\n          store.set('collection', [value]);\n        }\n        break;\n      case 'clear':\n        this.setState({\n          value: '',\n        });\n        const { width} = this.state;\n        generate('http', {width})\n          .then(url => {\n            this.setState({\n              qrCodeImg: url\n            })\n          })\n          .catch(err => {\n            console.error(err)\n          });\n    }\n  }\n\n  render() {\n    const {qrCodeImg, value, width} = this.state;\n    return (\n      <ThemeProvider theme={original}>\n\n        <div className='generate-qr-code-c'>\n          <div className='generate-qr-code-c-left'>\n            <TextField multiline rows={10} value={value} onChange={this.handleChange} fullWidth placeholder=\"请输入链接...\"/>\n            <div className='generate-qr-code-c-left-action'>\n              <Button onClick={() => this.action('clear')}>清空</Button>\n              <Button onClick={() => this.action('collect')}>收藏链接</Button>\n              <Button onClick={() => this.action('copy')}>复制链接</Button>\n              <Button onClick={() => this.action('copy-qrcode')}>复制二维码</Button>\n              <Button onClick={() => this.action('download-qrcode')}>下载二维码</Button>\n            </div>\n          </div>\n          <div className='generate-qr-code-c-right'>\n            <div className='generate-qr-code-resize'>\n              <div className=\"generate-qr-code-resize-slide\">\n                <Slider\n                  size='280px'\n                  min={100}\n                  max={300}\n                  step={25}\n                  defaultValue={200}\n                  marks={[\n                    {value: 300, label: '300px'},\n                    {value: 250, label: '250px'},\n                    {value: 200, label: '200px'},\n                    {value: 150, label: '150px'},\n                    {value: 100, label: '150px'},\n                  ]}\n                  onChange={this.resize}\n                  orientation='vertical'\n                />\n              </div>\n              <div className=\"generate-qr-code-resize-code\">\n                <Avatar size={width} src={qrCodeImg} square />\n              </div>\n            </div>\n          </div>\n        </div>\n      </ThemeProvider>\n    )\n  }\n}\n\nexport default GenerateQrcode;\n",["29","30"],"/Users/pomelo/WebstormProjects/qr-code/src/components/collection/index.js",["31"],"import React, {Component} from \"react\";\nimport {\n  Button,\n  Table,\n  TableBody,\n  TableHead,\n  TableRow,\n  TableHeadCell,\n  TableDataCell,\n  Cutout,\n} from 'react95';\nimport store from 'store';\nimport copy from 'copy-to-clipboard';\nimport observerPlugin from 'store/plugins/observe';\n\nstore.addPlugin(observerPlugin);\n\n\nclass Collection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      collection: [],\n    };\n    this.delete = this.delete.bind(this);\n    this.copy = this.copy.bind(this);\n  }\n\n  componentDidMount() {\n    store.observe('collection', (val) => {\n      if (val) {\n        this.setState({\n          collection: val\n        })\n      }\n    });\n  }\n\n  delete(url) {\n    const collection = store.get('collection');\n    store.set('collection', collection.filter(it => it !== url))\n  }\n\n  copy(url) {\n    copy(url);\n  }\n\n  render() {\n    const {\n      collection\n    } = this.state;\n    return (\n      <div>\n        <Table>\n          <TableHead>\n            <TableRow head>\n              <TableHeadCell>序号</TableHeadCell>\n              <TableHeadCell>链接</TableHeadCell>\n              <TableHeadCell>操作</TableHeadCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {collection.map((it, index) => <TableRow key={index}>\n              <TableDataCell style={{textAlign: 'center'}}>\n              <span role='img' aria-label='LEAF'>\n                {index + 1}\n              </span>\n              </TableDataCell>\n              <TableDataCell>{it}</TableDataCell>\n              <TableDataCell style={{textAlign: 'center'}}>\n                <Button onClick={() => this.delete(it)}>删除</Button>\n                <Button onClick={() => this.copy(it)}>复制</Button>\n              </TableDataCell>\n            </TableRow>)}\n          </TableBody>\n        </Table>\n      </div>\n    )\n  }\n}\n\nexport default Collection;\n",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":70,"column":5,"nodeType":"38","messageId":"39","endLine":112,"endColumn":6},{"ruleId":"32","replacedBy":"40"},{"ruleId":"34","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":10,"column":3,"nodeType":"44","messageId":"45","endLine":10,"endColumn":9},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["46"],["47"],"no-unused-vars","'Cutout' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]